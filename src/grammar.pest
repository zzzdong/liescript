program = { SOI ~ "\n"* ~ (stmt)* ~ stmt? ~ "\n"* ~ EOI }

stmt = { itemStmt | letStmt | exprStmt }

letStmt = { "let" ~ ident ~ "=" ~ exprStmt ~ ";" }

itemStmt = { structItem | funcItem | constItem }

structItem = { "struct" ~ ident ~ "{" ~ fieldItem* ~ "}" }

fieldItem = { ident ~ ":" ~ typeDecl ~ "," }

funcItem = { "fn" ~ ident ~ "(" ~ argList ~ ")" ~ ("->" ~ typeDecl )? ~ "{" ~ "}" }

argList = { argItem? ~ ("," ~ argItem)* }

argItem = { ident ~ ":" ~ typeDecl }

constItem = { "const" ~ ident ~ "=" ~ literalExpr }

exprStmt = { literalExpr }

literalExpr = { boolLit | charLit | stringLit | floatLit | integerLit }

boolLit = @{ "true" | "false" }

charLit = @{ "'" ~ char ~ "'" }

integerLit = @{ "_"? ~ ASCII_DIGIT+ }

floatLit = @{ "_"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }

stringLit = @{ "\"" ~ stringInner ~ "\"" }

stringInner = @{ char* }

char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }



typeDecl = { builtinType | ident }

builtinType = { "bool" | "byte" | "char" | "int" | "float" | "string" }


WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
